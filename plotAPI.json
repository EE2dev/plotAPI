{
  "name": "Plot",
  "children": [
    {
      "name": ".area()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The horizontal position of the baseline bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The horizontal position of the topline bound to the x scale. If x2 is not specified, it defaults to x1"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The vertical position of the baseline bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The vertical position of the topline bound to the y scale. If y2 is not specified, it defaults to y1"
            },
            {
              "name": "z",
              "type": "channel",
              "info": "A categorical value to group data into series. If z is not specified, it defaults to fill if a channel, or stroke if a channel"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'basis'",
                  "type": "string literal",
                  "info": "A cubic basis spline (repeating the end points)"
                },
                {
                  "name": "'basis-open'",
                  "type": "string literal",
                  "info": "An open cubic basis spline"
                },
                {
                  "name": "'basis-closed'",
                  "type": "string literal",
                  "info": "A closed cubic basis spline"
                },
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'cardinal'",
                  "type": "string literal",
                  "info": "A cubic cardinal spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'cardinal-open'",
                  "type": "string literal",
                  "info": "An open cubic cardinal spline"
                },
                {
                  "name": "'cardinal-closed'",
                  "type": "string literal",
                  "info": "An closed cubic cardinal spline"
                },
                {
                  "name": "'catmull-rom'",
                  "type": "string literal",
                  "info": "A cubic Catmull–Rom spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'catmull-rom-open'",
                  "type": "string literal",
                  "info": "An open cubic Catmull–Rom spline"
                },
                {
                  "name": "'catmull-rom-closed'",
                  "type": "string literal",
                  "info": "A closed cubic Catmull–Rom spline"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'linear-closed'",
                  "type": "string literal",
                  "info": "A closed piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'monotone-x'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in x"
                },
                {
                  "name": "'monotone-y'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in y"
                },
                {
                  "name": "'natural'",
                  "type": "string literal",
                  "info": "A natural cubic spline"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws regions formed by a baseline (x1, y1) and a topline (x2, y2) as in an area chart. Often the baseline represents y = 0. While not required, typically the x and y scales are both quantitative",
      "url": "marks/area.png"
    },
    {
      "name": ".areaX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position of the baseline and topline bound to the x scale. The y option specifies the y1 channel"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The horizontal position of the baseline bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The horizontal position of the topline bound to the x scale. If x2 is not specified, it defaults to x1"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "If neither the x1 nor x2 option is specified, the x option may be specified as shorthand to apply an implicit stackX transform with a baseline at x = 0. If the y option is not specified, it defaults to the identity function"
            },
            {
              "name": "z",
              "type": "channel",
              "info": "A categorical value to group data into series. If z is not specified, it defaults to fill if a channel, or stroke if a channel"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'basis'",
                  "type": "string literal",
                  "info": "A cubic basis spline (repeating the end points)"
                },
                {
                  "name": "'basis-open'",
                  "type": "string literal",
                  "info": "An open cubic basis spline"
                },
                {
                  "name": "'basis-closed'",
                  "type": "string literal",
                  "info": "A closed cubic basis spline"
                },
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'cardinal'",
                  "type": "string literal",
                  "info": "A cubic cardinal spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'cardinal-open'",
                  "type": "string literal",
                  "info": "An open cubic cardinal spline"
                },
                {
                  "name": "'cardinal-closed'",
                  "type": "string literal",
                  "info": "An closed cubic cardinal spline"
                },
                {
                  "name": "'catmull-rom'",
                  "type": "string literal",
                  "info": "A cubic Catmull–Rom spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'catmull-rom-open'",
                  "type": "string literal",
                  "info": "An open cubic Catmull–Rom spline"
                },
                {
                  "name": "'catmull-rom-closed'",
                  "type": "string literal",
                  "info": "A closed cubic Catmull–Rom spline"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'linear-closed'",
                  "type": "string literal",
                  "info": "A closed piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'monotone-x'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in x"
                },
                {
                  "name": "'monotone-y'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in y"
                },
                {
                  "name": "'natural'",
                  "type": "string literal",
                  "info": "A natural cubic spline"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Returns a new area with the given data and options. This constructor is used when the baseline and topline share y values, as in a time-series area chart where time goes up↑",
      "url": "marks/areaX.png"
    },
    {
      "name": ".areaY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position of the baseline and topline bound to the x scale. The x option specifies the x1 channel"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The vertical position of the baseline bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The vertical position of the topline bound to the y scale. If y2 is not specified, it defaults to y1"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "If neither the y1 nor y2 option is specified, the y option may be specified as shorthand to apply an implicit stackY transform with a baseline at y = 0. If the y option is not specified, it defaults to the identity function"
            },
            {
              "name": "z",
              "type": "channel",
              "info": "A categorical value to group data into series. If z is not specified, it defaults to fill if a channel, or stroke if a channel"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'basis'",
                  "type": "string literal",
                  "info": "A cubic basis spline (repeating the end points)"
                },
                {
                  "name": "'basis-open'",
                  "type": "string literal",
                  "info": "An open cubic basis spline"
                },
                {
                  "name": "'basis-closed'",
                  "type": "string literal",
                  "info": "A closed cubic basis spline"
                },
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'cardinal'",
                  "type": "string literal",
                  "info": "A cubic cardinal spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'cardinal-open'",
                  "type": "string literal",
                  "info": "An open cubic cardinal spline"
                },
                {
                  "name": "'cardinal-closed'",
                  "type": "string literal",
                  "info": "An closed cubic cardinal spline"
                },
                {
                  "name": "'catmull-rom'",
                  "type": "string literal",
                  "info": "A cubic Catmull–Rom spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'catmull-rom-open'",
                  "type": "string literal",
                  "info": "An open cubic Catmull–Rom spline"
                },
                {
                  "name": "'catmull-rom-closed'",
                  "type": "string literal",
                  "info": "A closed cubic Catmull–Rom spline"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'linear-closed'",
                  "type": "string literal",
                  "info": "A closed piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'monotone-x'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in x"
                },
                {
                  "name": "'monotone-y'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in y"
                },
                {
                  "name": "'natural'",
                  "type": "string literal",
                  "info": "A natural cubic spline"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Returns a new area with the given data and options. This constructor is used when the baseline and topline share x values, as in a time-series area chart where time goes right→",
      "url": "marks/area.png"
    },
    {
      "name": ".barX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "If neither the x1 nor x2 option are specified, the x option may be specified as shorthand to apply an implicit stackX transform. This is the typical configuration for a horizontal bar chart with bars aligned at x = 0. If the x option is not specified, it defaults to the identity function"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position; bound to the x scale"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale, which must be band. If the y channel is not specified, the bar will span the full vertical extent of the plot (or facet)"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws rectangles where y is ordinal and x is quantitative. There is usually one ordinal value associated with each bar, such as a name, and two quantitative values defining a lower and upper bound. The lower bound is often not specified explicitly because it defaults to zero as in a conventional bar chart",
      "url": "marks/barX.png"
    },
    {
      "name": ".barY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "If neither the y1 nor y2 option are specified, the x option may be specified as shorthand to apply an implicit stackY transform. This is the typical configuration for a horizontal bar chart with bars aligned at y = 0. If the y option is not specified, it defaults to the identity function"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale, which must be band. If the x channel is not specified, the bar will span the full horizontal extent of the plot (or facet)"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws rectangles where x is ordinal and y is quantitative. There is usually one ordinal value associated with each bar, such as a name, and two quantitative values defining a lower and upper bound. The lower bound is often not specified explicitly because it defaults to zero as in a conventional bar chart",
      "url": "marks/barY.png"
    },
    {
      "name": ".cell()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale, which must be band"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale, which must be band"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws rectangles where both x and y are ordinal, typically in conjunction with a fill channel to encode value. Cells are often used in conjunction with a group transform",
      "url": "marks/cell.png"
    },
    {
      "name": ".cellX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale, which must be band"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale, which must be band"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Equivalent to Plot.cell, except that if the x option is not specified, it defaults to [0, 1, 2, …], and if the fill option is not specified and stroke is not a channel, the fill defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]",
      "url": "marks/cell.png"
    },
    {
      "name": ".cellY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale, which must be band"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale, which must be band"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Equivalent to Plot.cell, except that if the y option is not specified, it defaults to [0, 1, 2, …], and if the fill option is not specified and stroke is not a channel, the fill defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]",
      "url": "marks/cell.png"
    },
    {
      "name": ".dot()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. If the x channel is not specified, dots will be horizontally centered in the plot (or facet)"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. If the y channel is not specified, dots will vertically centered in the plot (or facet)"
            },
            {
              "name": "r",
              "type": "channel",
              "info": "The radius (area) which defaults to 3 pixels bound to the radius scale, which defaults to sqr"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1.5"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws circles (and in the future, possibly other symbols) as in a scatterplot",
      "url": "marks/dot.png"
    },
    {
      "name": ".dotX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. If the x channel is not specified, it defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]"
            },
            {
              "name": "r",
              "type": "channel",
              "info": "The radius (area) which defaults to 3 pixels bound to the radius scale, which defaults to sqr"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1.5"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Equivalent to Plot.dot except that if the x option is not specified, it defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]",
      "url": "marks/dot.png"
    },
    {
      "name": ".dotY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. If the y channel is not specified, it defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]"
            },
            {
              "name": "r",
              "type": "channel",
              "info": "The radius (area) which defaults to 3 pixels bound to the radius scale, which defaults to sqr"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1.5"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Equivalent to Plot.dot except that if the y option is not specified, it defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]",
      "url": "marks/dot.png"
    },
    {
      "name": ".line()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale"
            },
            {
              "name": "z",
              "type": "channel",
              "info": "A categorical value to group data into series. If z is not specified, it defaults to stroke if a channel, or fill if a channel"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'basis'",
                  "type": "string literal",
                  "info": "A cubic basis spline (repeating the end points)"
                },
                {
                  "name": "'basis-open'",
                  "type": "string literal",
                  "info": "An open cubic basis spline"
                },
                {
                  "name": "'basis-closed'",
                  "type": "string literal",
                  "info": "A closed cubic basis spline"
                },
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'cardinal'",
                  "type": "string literal",
                  "info": "A cubic cardinal spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'cardinal-open'",
                  "type": "string literal",
                  "info": "An open cubic cardinal spline"
                },
                {
                  "name": "'cardinal-closed'",
                  "type": "string literal",
                  "info": "An closed cubic cardinal spline"
                },
                {
                  "name": "'catmull-rom'",
                  "type": "string literal",
                  "info": "A cubic Catmull–Rom spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'catmull-rom-open'",
                  "type": "string literal",
                  "info": "An open cubic Catmull–Rom spline"
                },
                {
                  "name": "'catmull-rom-closed'",
                  "type": "string literal",
                  "info": "A closed cubic Catmull–Rom spline"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'linear-closed'",
                  "type": "string literal",
                  "info": "A closed piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'monotone-x'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in x"
                },
                {
                  "name": "'monotone-y'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in y"
                },
                {
                  "name": "'natural'",
                  "type": "string literal",
                  "info": "A natural cubic spline"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1.5"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Default is 1"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws two-dimensional lines as in a line chart. If neither the x nor y options are specified, data is assumed to be an array of pairs [[x₀, y₀], [x₁, y₁], [x₂, y₂], …] such that x = [x₀, x₁, x₂, …] and y = [y₀, y₁, y₂, …]",
      "url": "marks/line.png"
    },
    {
      "name": ".lineX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. If the x option is not specified, it defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. If the y option is not specified, it defaults to [0, 1, 2, …]"
            },
            {
              "name": "z",
              "type": "channel",
              "info": "A categorical value to group data into series. If z is not specified, it defaults to stroke if a channel, or fill if a channel"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'basis'",
                  "type": "string literal",
                  "info": "A cubic basis spline (repeating the end points)"
                },
                {
                  "name": "'basis-open'",
                  "type": "string literal",
                  "info": "An open cubic basis spline"
                },
                {
                  "name": "'basis-closed'",
                  "type": "string literal",
                  "info": "A closed cubic basis spline"
                },
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'cardinal'",
                  "type": "string literal",
                  "info": "A cubic cardinal spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'cardinal-open'",
                  "type": "string literal",
                  "info": "An open cubic cardinal spline"
                },
                {
                  "name": "'cardinal-closed'",
                  "type": "string literal",
                  "info": "An closed cubic cardinal spline"
                },
                {
                  "name": "'catmull-rom'",
                  "type": "string literal",
                  "info": "A cubic Catmull–Rom spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'catmull-rom-open'",
                  "type": "string literal",
                  "info": "An open cubic Catmull–Rom spline"
                },
                {
                  "name": "'catmull-rom-closed'",
                  "type": "string literal",
                  "info": "A closed cubic Catmull–Rom spline"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'linear-closed'",
                  "type": "string literal",
                  "info": "A closed piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'monotone-x'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in x"
                },
                {
                  "name": "'monotone-y'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in y"
                },
                {
                  "name": "'natural'",
                  "type": "string literal",
                  "info": "A natural cubic spline"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1.5"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Default is 1"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws two-dimensional lines as in a line chart. Equivalent to Plot.line except that if the x option is not specified, it defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]. If the y option is not specified, it defaults to [0, 1, 2, …]",
      "url": "marks/lineX.png"
    },
    {
      "name": ".lineY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. If the x option is not specified, it defaults to [0, 1, 2, …]"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. If the y option is not specified, it defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]"
            },
            {
              "name": "z",
              "type": "channel",
              "info": "A categorical value to group data into series. If z is not specified, it defaults to stroke if a channel, or fill if a channel"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'basis'",
                  "type": "string literal",
                  "info": "A cubic basis spline (repeating the end points)"
                },
                {
                  "name": "'basis-open'",
                  "type": "string literal",
                  "info": "An open cubic basis spline"
                },
                {
                  "name": "'basis-closed'",
                  "type": "string literal",
                  "info": "A closed cubic basis spline"
                },
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'cardinal'",
                  "type": "string literal",
                  "info": "A cubic cardinal spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'cardinal-open'",
                  "type": "string literal",
                  "info": "An open cubic cardinal spline"
                },
                {
                  "name": "'cardinal-closed'",
                  "type": "string literal",
                  "info": "An closed cubic cardinal spline"
                },
                {
                  "name": "'catmull-rom'",
                  "type": "string literal",
                  "info": "A cubic Catmull–Rom spline (with one-sided differences at the ends)"
                },
                {
                  "name": "'catmull-rom-open'",
                  "type": "string literal",
                  "info": "An open cubic Catmull–Rom spline"
                },
                {
                  "name": "'catmull-rom-closed'",
                  "type": "string literal",
                  "info": "A closed cubic Catmull–Rom spline"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'linear-closed'",
                  "type": "string literal",
                  "info": "A closed piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'monotone-x'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in x"
                },
                {
                  "name": "'monotone-y'",
                  "type": "string literal",
                  "info": "A cubic spline that preserves monotonicity in y"
                },
                {
                  "name": "'natural'",
                  "type": "string literal",
                  "info": "A natural cubic spline"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1.5"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Default is 1"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws two-dimensional lines as in a line chart. Equivalent to Plot.line except that if the y option is not specified, it defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]. If the x option is not specified, it defaults to [0, 1, 2, …]",
      "url": "marks/line.png"
    },
    {
      "name": ".link()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position bound to the x scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "curve",
              "type": "constant string",
              "children": [
                {
                  "name": "'bump-x'",
                  "type": "string literal",
                  "info": "A Bézier curve with horizontal tangents"
                },
                {
                  "name": "'bump-y'",
                  "type": "string literal",
                  "info": "A Bézier curve with vertical tangents"
                },
                {
                  "name": "'linear'",
                  "type": "string literal",
                  "info": "A piecewise linear curve (i.e., straight line segments)"
                },
                {
                  "name": "'step'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes at the midpoint of x"
                },
                {
                  "name": "'step-after'",
                  "type": "string literal",
                  "info": "A piecewise constant function where y changes after x"
                },
                {
                  "name": "'step-before'",
                  "type": "string literal",
                  "info": "A piecewise constant function where x changes after y"
                }
              ],
              "info": "The curve method, either a string or a function"
            },
            {
              "name": "tension",
              "type": "constant number",
              "info": "The curve tension for fine-tuning. The tension option only has an effect on cardinal and Catmull–Rom splines (cardinal, cardinal-open, cardinal-closed, catmull-rom, catmull-rom-open, and catmull-rom-closed). For cardinal splines, it corresponds to tension; for Catmull–Rom splines, alpha"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels. Default is 1"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel. Default is 1"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws line segments (or curves) connecting pairs of points",
      "url": "marks/link.png"
    },
    {
      "name": ".rect()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position; bound to the x scale"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws rectangles where both x and y are quantitative as in a histogram. Both pairs of quantitative values represent lower and upper bounds, and often one of the lower bounds is implicitly zero. Rects are often used in conjunction with a bin transform",
      "url": "marks/rectX.png"
    },
    {
      "name": ".rectX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "If neither the x1 nor x2 option are specified, the x option may be specified as shorthand to apply an implicit stackX transform. This is the typical configuration for a histogram with rects aligned at x = 0. If the x option is not specified, it defaults to the identity function"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position; bound to the x scale"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws rectangles where both x and y are quantitative as in a histogram. Both pairs of quantitative values represent lower and upper bounds, and often one of the lower bounds is implicitly zero. Rects are often used in conjunction with a bin transform. The Plot.rectX() mark is shorthand for x1 = zero, x2 = x",
      "url": "marks/rectX.png"
    },
    {
      "name": ".rectY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "If neither the y1 nor y2 option is specified, the y option may be specified as shorthand to apply an implicit stackY transform; this is the typical configuration for a histogram with rects aligned at y = 0. If the y option is not specified, it defaults to the identity function"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position; bound to the x scale"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "rx",
              "type": "constant number",
              "info": "The x-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "ry",
              "type": "constant number",
              "info": "The y-radius for rounded corners specified in either pixels or percentages (strings). Default is 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws rectangles where both x and y are quantitative as in a histogram. Both pairs of quantitative values represent lower and upper bounds, and often one of the lower bounds is implicitly zero. Rects are often used in conjunction with a bin transform. The Plot.rectY() mark is shorthand for y1 = zero, y2 = y",
      "url": "marks/rectY.png"
    },
    {
      "name": ".ruleX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. If the x option is not specified, it defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]"
            },
            {
              "name": "y1",
              "type": "channel",
              "info": "The starting vertical position bound to the y scale. If the y channel is not specified, the rule will start at the top of the plot (or facet)"
            },
            {
              "name": "y2",
              "type": "channel",
              "info": "The ending vertical position bound to the y scale. If the y channel is not specified, the rule will end at the bottom of the plot (or facet)"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. If the y channel is specified, it is shorthand for the y2 option with y1 equal to zero"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws an orthogonal line at the given horizontal position, either across the entire plot (or facet) or bounded in the opposite dimension",
      "url": "marks/ruleX.png"
    },
    {
      "name": ".ruleY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x1",
              "type": "channel",
              "info": "The starting horizontal position bound to the x scale. If the x channel is not specified, the rule will start at the left edge of the plot (or facet)"
            },
            {
              "name": "x2",
              "type": "channel",
              "info": "The ending horizontal position bound to the x scale. If the x channel is not specified, the rule will end at the right edge of the plot (or facet)"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. If the x channel is specified, it is shorthand for the x2 option with x1 equal to zero"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. If the y option is not specified, it defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws an orthogonal line at the given vertical position, either across the entire plot (or facet) or bounded in the opposite dimension",
      "url": "marks/ruleY.png"
    },
    {
      "name": ".text()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "text",
              "type": "channel",
              "info": "The text contents (a string). If text is not specified, it defaults to [0, 1, 2, …] so that something is visible by default"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale"
            },
            {
              "name": "fontSize",
              "type": "channel",
              "info": "The font size in pixels. Defaults to 10"
            },
            {
              "name": "rotate",
              "type": "channel",
              "info": "The rotation in degrees clockwise. Defaults to 0"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "fontFamily",
              "type": "constant string",
              "info": "The font name which defaults to 'system-ui'"
            },
            {
              "name": "fontStyle",
              "type": "constant string",
              "info": "The font style which defaults to 'normal'"
            },
            {
              "name": "fontVariant",
              "type": "constant string",
              "info": "The font variant which defaults to 'normal'"
            },
            {
              "name": "fontWeight",
              "type": "constant string",
              "info": "The font weight which defaults to 'normal'"
            },
            {
              "name": "dx",
              "type": "constant string",
              "info": "The horizontal offset as string including units or as a number. Defaults to 0"
            },
            {
              "name": "dy",
              "type": "constant string",
              "info": "The vertical offset as a string including units or as a number. Defaults to 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws a text label at the specified position",
      "url": "marks/text.png"
    },
    {
      "name": ".textX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "text",
              "type": "channel",
              "info": "The text contents (a string). If text is not specified, it defaults to [0, 1, 2, …] so that something is visible by default"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale. Defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale"
            },
            {
              "name": "fontSize",
              "type": "channel",
              "info": "The font size in pixels. Defaults to 10"
            },
            {
              "name": "rotate",
              "type": "channel",
              "info": "The rotation in degrees clockwise. Defaults to 0"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "fontFamily",
              "type": "constant string",
              "info": "The font name which defaults to 'system-ui'"
            },
            {
              "name": "fontStyle",
              "type": "constant string",
              "info": "The font style which defaults to 'normal'"
            },
            {
              "name": "fontVariant",
              "type": "constant string",
              "info": "The font variant which defaults to 'normal'"
            },
            {
              "name": "fontWeight",
              "type": "constant string",
              "info": "The font weight which defaults to 'normal'"
            },
            {
              "name": "dx",
              "type": "constant string",
              "info": "The horizontal offset as string including units or as a number. Defaults to 0"
            },
            {
              "name": "dy",
              "type": "constant string",
              "info": "The vertical offset as a string including units or as a number. Defaults to 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Equivalent to Plot.text(), except x defaults to the identity function and assumes that data = [x₀, x₁, x₂, …]",
      "url": "marks/text.png"
    },
    {
      "name": ".textY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "text",
              "type": "channel",
              "info": "The text contents (a string). If text is not specified, it defaults to [0, 1, 2, …] so that something is visible by default"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale. Defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]"
            },
            {
              "name": "fontSize",
              "type": "channel",
              "info": "The font size in pixels. Defaults to 10"
            },
            {
              "name": "rotate",
              "type": "channel",
              "info": "The rotation in degrees clockwise. Defaults to 0"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to currentColor if the stroke is none, and to none otherwise."
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is none"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "fontFamily",
              "type": "constant string",
              "info": "The font name which defaults to 'system-ui'"
            },
            {
              "name": "fontStyle",
              "type": "constant string",
              "info": "The font style which defaults to 'normal'"
            },
            {
              "name": "fontVariant",
              "type": "constant string",
              "info": "The font variant which defaults to 'normal'"
            },
            {
              "name": "fontWeight",
              "type": "constant string",
              "info": "The font weight which defaults to 'normal'"
            },
            {
              "name": "dx",
              "type": "constant string",
              "info": "The horizontal offset as string including units or as a number. Defaults to 0"
            },
            {
              "name": "dy",
              "type": "constant string",
              "info": "The vertical offset as a string including units or as a number. Defaults to 0"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Equivalent to Plot.text(), except y defaults to the identity function and assumes that data = [y₀, y₁, y₂, …]",
      "url": "marks/text.png"
    },
    {
      "name": ".tickX()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale which must be band. If the y channel is not specified, the tick will span the full vertical extent of the plot (or facet)"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws an orthogonal line at the given horizontal position, with an optional secondary position dimension along a band scale",
      "url": "marks/tickX.png"
    },
    {
      "name": ".tickY()",
      "type": "mark constructor",
      "children": [
        {
          "name": "data",
          "type": "data"
        },
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "x",
              "type": "channel",
              "info": "The horizontal position bound to the x scale which must be band. If the x channel is not specified, the tick will span the full horizontal extent of the plot (or facet)"
            },
            {
              "name": "y",
              "type": "channel",
              "info": "The vertical position bound to the y scale"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "title",
              "type": "channel",
              "info": "The tooltip as a string of text, possibly with newlines"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws an orthogonal line at the given vertical position, with an optional secondary position dimension along a band scale",
      "url": "marks/tickY.png"
    },
    {
      "name": ".frame()",
      "type": "mark constructor",
      "children": [
        {
          "name": "{}",
          "type": "options",
          "children": [
            {
              "name": "filter",
              "type": "transform",
              "info": "Filters the data according to the specified accessor or values. It does not affect inferred scale domains"
            },
            {
              "name": "sort",
              "type": "transform",
              "info": "Sorts the data according to the specified comparator, accessor, or values. If the sort option is a function but does not take exactly one argument, it is assumed to be a comparator function. Otherwise, the sort option is interpreted as a channel value definition and thus may be either as a column name, accessor function, or array of values"
            },
            {
              "name": "reverse",
              "type": "transform",
              "info": "Reverses the sorted (or if not sorted, the input) data order"
            },
            {
              "name": "fill",
              "type": "channel",
              "info": "The fill color. If it is a channel it is bound to the color scale. Defaults to none"
            },
            {
              "name": "fillOpacity",
              "type": "channel",
              "info": "The fill opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "stroke",
              "type": "channel",
              "info": "The stroke color. If it is a channel it is bound to the color scale. Default is currentColor"
            },
            {
              "name": "strokeOpacity",
              "type": "channel",
              "info": "The stroke opacity (a number between 0 and 1). If it is a channel it is bound to the opacity scale"
            },
            {
              "name": "insetTop",
              "type": "constant number",
              "info": "Adds spacing in pixels at the top for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetRight",
              "type": "constant number",
              "info": "Adds spacing in pixels on the right for each element. Default is 0..Shorthand: inset"
            },
            {
              "name": "insetBottom",
              "type": "constant number",
              "info": "Adds spacing in pixels at the bottom for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "insetLeft",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left for each element. Default is 0. Shorthand: inset"
            },
            {
              "name": "inset",
              "type": "constant number",
              "info": "Adds spacing in pixels on the left, right, top and bottom. Default is 0. Shorthand for insetLeft, insetRight, insetTop, insetBottom"
            },
            {
              "name": "strokeWidth",
              "type": "constant number",
              "info": "The stroke width in pixels"
            },
            {
              "name": "strokeLinejoin",
              "type": "constant string",
              "children": [
                {
                  "name": "'arcs'",
                  "type": "string literal"
                },
                {
                  "name": "'bevel'",
                  "type": "string literal"
                },
                {
                  "name": "'miter'",
                  "type": "string literal"
                },
                {
                  "name": "'miter-clip'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the corners of paths when they are stroked"
            },
            {
              "name": "strokeLinecap",
              "type": "constant string",
              "children": [
                {
                  "name": "'butt'",
                  "type": "string literal"
                },
                {
                  "name": "'round'",
                  "type": "string literal"
                },
                {
                  "name": "'square'",
                  "type": "string literal"
                }
              ],
              "info": "The shape to be used at the end of open subpaths when they are stroked"
            },
            {
              "name": "strokeMiterlimit",
              "type": "constant number",
              "info": "A limit on the ratio of the miter length to the stroke-width used to draw a miter join. When the limit is exceeded, the join is converted from a miter to a bevel"
            },
            {
              "name": "strokeDasharray",
              "type": "constant string",
              "info": "The pattern of dashes and gaps used to paint the outline of the shape"
            },
            {
              "name": "mixBlendMode",
              "type": "constant string",
              "info": "This sets how an element's content should blend with the content of the element's parent and the element's background",
              "children": [
                {
                  "name": "'normal'",
                  "type": "string literal"
                },
                {
                  "name": "'multiply'",
                  "type": "string literal"
                },
                {
                  "name": "'screen'",
                  "type": "string literal"
                },
                {
                  "name": "'overlay'",
                  "type": "string literal"
                },
                {
                  "name": "'darken'",
                  "type": "string literal"
                },
                {
                  "name": "'lighten'",
                  "type": "string literal"
                },
                {
                  "name": "'color-dodge'",
                  "type": "string literal"
                },
                {
                  "name": "'color-burn'",
                  "type": "string literal"
                },
                {
                  "name": "'hard-light'",
                  "type": "string literal"
                },
                {
                  "name": "'soft-light'",
                  "type": "string literal"
                },
                {
                  "name": "'difference'",
                  "type": "string literal"
                },
                {
                  "name": "'exclusion'",
                  "type": "string literal"
                },
                {
                  "name": "'hue'",
                  "type": "string literal"
                },
                {
                  "name": "'saturation'",
                  "type": "string literal"
                },
                {
                  "name": "'color'",
                  "type": "string literal"
                },
                {
                  "name": "'luminosity'",
                  "type": "string literal"
                }
              ]
            }
          ]
        }
      ],
      "info": "Draws a simple frame around the entire plot (or facet)",
      "url": "marks/frame.png"
    },
    {
      "name": ".formatIsoDate()",
      "type": "format",
      "children": [
        {
          "name": "date",
          "type": "date",
          "children": []
        }
      ],
      "info": "This function takes one argument (date) and returns the shortest equivalent ISO 8601 UTC string"
    },
    {
      "name": ".formatWeekday()",
      "type": "format",
      "children": [
        {
          "name": "locale",
          "type": "",
          "children": []
        },
        {
          "name": "format",
          "type": "",
          "children": []
        }
      ],
      "info": "This function takes two arguments (locale, format) and returns a function that formats a given week day number (from 0 = Sunday to 6 = Saturday) according to the specified locale and format. The locale is a BCP 47 language tag and defaults to U.S. English. The format is a weekday format: either narrow, short, or long; if not specified, it defaults to short"
    },
    {
      "name": ".formatMonth()",
      "type": "format",
      "children": [
        {
          "name": "locale",
          "type": "",
          "children": []
        },
        {
          "name": "format",
          "type": "",
          "children": []
        }
      ],
      "info": "This function takes two arguments (locale, format) and returns a function that formats a given month number (from 0 = January to 11 = December) according to the specified locale and format. The locale is a BCP 47 language tag and defaults to U.S. English. The format is a month format: either 2-digit, numeric, narrow, short, long; if not specified, it defaults to short"
    },
    {
      "name": ".plot()",
      "type": "options",
      "children": []
    }
  ]
}